#include <iostream>
using namespace std;
template <typename T>

class Node {
public:
    T data;
    Node* next;
    Node* previous;
    Node(const T& value) : data(value), next(nullptr), previous(nullptr) {}
};

template <typename T>
class LinkedList
{


public:

    int size = 0;

    Node<T>* head = nullptr;


    void Next() {
        Node<T>* current = head;
        while (current != nullptr) {
            Node<T>* next = current->next;
            current = next;
        }
    }

    void Previous()
    {
        Node<T>* current = head;
        while (current != nullptr)
        {
            Node<T>* previous = current->previous;
            current = previous;
        }
    }

    void push_back(const T& value)
    {
        Node<T>* newNode = new Node<T>(value);
        newNode->next = head;
        newNode->previous = head;

        head = newNode;
        size++;
        Node<T>* current = head;
        cout << current->data;
    }

};

template<typename T>
class queue : private LinkedList<T>
{
    LinkedList<T> list;

public:
    void enqueue(const T& value)
    {
        this->push_back(value);
    }

    void dequeue() {
        if (this->head == nullptr) {
            cout << "queue is empty";
        }
        else {
            Node<T>* front = this->head;
            this->head = front->next;

            if (this->head != nullptr) {
                this->head->previous = nullptr;
            }

        }

    }
};





    int main()
    {
        LinkedList<int> l;
        l.Next();
        l.Previous();
        l.push_back(5);
        l.push_back(6);
        l.push_back(7);
        l.push_back(8);

        queue<int> q;
        q.enqueue(6);
        q.enqueue(7);
        q.enqueue(8);



        q.dequeue();
        q.dequeue();

    }
